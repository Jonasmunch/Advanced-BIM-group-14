##################################################
##### Opening the IFC interface and packages #####
##################################################

import ifcopenshell
import ifcopenshell.geom
from blenderbim.bim.ifc import IfcStore

##################################################
##### Retriving source model                 #####
##################################################

file = IfcStore.get_file()

##################################################
##### Extracting beams and columns           #####
##################################################

Beams = file.by_type("IfcBeam")
Columns = file.by_type("IfcColumn")

#### testing for possible errors: ####

if len(Columns) <= 0:    #logical testing if 'Columns' string is of lenght >0
    answer = input('ERROR missing columns. Do you want to continue? (yes or no):')  #Creating answer menu
    if answer.lower().startswith("yes"):    #Criteria if answer = yes
        print("Proceeding without columns")
        Columns = 0
    elif answer.lower().startswith("no"):   #Criteria if answer = no
        print("Executing process. Please update source model")
        exit()

if len(Beams) <= 0:
    answer = input('ERROR missing beams. Do you want to continue? (yes or no):')
    if answer.lower().startswith("yes"):
        print("Proceeding without beams")
        Beams = 0
    elif answer.lower().startswith("no"):
        print("Executing process. Please update source model")
        exit()


##################################################
##### Extracting Beam properties             #####
##################################################

#### Extracting Material, Lenght and Cross area ####
# Creating empty property vectors 
BeamMaterial = []
BeamLenght = []
BeamCrossArea = []

# Looping through all beams
for beam in Beams:
    # Extracting Beam material, adding it to the property vector
    BeamMaterial.append(beam.IsDefinedBy[3].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    # Extracting Beam Lenght, adding it to the property vector
    BeamLenght.append(beam.IsDefinedBy[4].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    # Extracting Beam crosssectional area, adding it to the property vector
    pval_volume = beam.IsDefinedBy[4].RelatingPropertyDefinition[4][1].NominalValue.wrappedValue
    pval_length = beam.IsDefinedBy[4].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue
    BeamCrossArea.append(pval_volume/pval_length)


#### Extracting Element placement ####
# Creating empty property vectors
x_Placement = []
y_Placement = []
z_Placement = []

# Looping through all beams
for beam in Beams:
    # Extracting local placement matrix
    pmatrix = ifcopenshell.util.placement.get_local_placement(beam.ObjectPlacement)
    # Extracting axis placement and assigning them to placement_vector
    x_Placement.append(pmatrix[0,3])
    y_Placement.append(pmatrix[1,3])
    z_Placement.append(pmatrix[2,3])

# Creating total placement matrix
beam_PMatrix = [[x_Placement], [y_Placement], [z_Placement]]


#### Extracting Element Cross section ####
# Creating empty property vectors
# bf: flange with,  d: boddy flange height,  k:  ,  kr:  ,  tf: flange thickness,  tw: body flange thickness
bf = []
d  = []
k  = []
kr = []
tf = []
tw = []

# Looping through all beams
for beam in Beams:
    bf.append(beam.IsDefinedBy[12].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    d.append(beam.IsDefinedBy[12].RelatingPropertyDefinition[4][1].NominalValue.wrappedValue)
    k.append(beam.IsDefinedBy[12].RelatingPropertyDefinition[4][2].NominalValue.wrappedValue)
    kr.append(beam.IsDefinedBy[12].RelatingPropertyDefinition[4][3].NominalValue.wrappedValue)
    tf.append(beam.IsDefinedBy[12].RelatingPropertyDefinition[4][4].NominalValue.wrappedValue)
    tw.append(beam.IsDefinedBy[12].RelatingPropertyDefinition[4][5].NominalValue.wrappedValue)

# Creating total crossection matrix
beam_CMatrix = [[bf], [d], [k], [kr], [tf], [tw]]


##################################################
##### Extracting Column properties             #####
##################################################

#### Extracting Material, Lenght and Cross area ####
# Creating empty property vectors 
ColumnMaterial = []
ColumnLenght = []
ColumnCrossArea = []

# Looping through all beams
for column in Columns:
    # Extracting Column material, adding it to the property vector
    ColumnMaterial.append(column.IsDefinedBy[3].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    # Extracting Column Lenght, adding it to the property vector
    ColumnLenght.append(column.IsDefinedBy[4].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    # Extracting Column crosssectional area, adding it to the property vector
    pval_volume = column.IsDefinedBy[4].RelatingPropertyDefinition[4][1].NominalValue.wrappedValue
    pval_length = column.IsDefinedBy[4].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue
    ColumnCrossArea.append(pval_volume/pval_length)


#### Extracting Element placement ####
# Creating empty property vectors
x_Placement = []
y_Placement = []
z_Placement = []

# Looping through all beams
for column in Columns:
    # Extracting local placement matrix
    pmatrix = ifcopenshell.util.placement.get_local_placement(column.ObjectPlacement)
    # Extracting axis placement and assigning them to placement_vector
    x_Placement.append(pmatrix[0,3])
    y_Placement.append(pmatrix[1,3])
    z_Placement.append(pmatrix[2,3])

# Creating total placement matrix
column_PMatrix = [[x_Placement], [y_Placement], [z_Placement]]


#### Extracting Element Cross section ####
# Creating empty property vectors
# bf: flange with,  d: boddy flange height,  k:  ,  kr:  ,  tf: flange thickness,  tw: body flange thickness
bf = []
d  = []
k  = []
kr = []
tf = []
tw = []

# Looping through all columns
for column in Columns:
    bf.append(column.IsDefinedBy[12].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    d.append(column.IsDefinedBy[12].RelatingPropertyDefinition[4][1].NominalValue.wrappedValue)
    k.append(column.IsDefinedBy[12].RelatingPropertyDefinition[4][2].NominalValue.wrappedValue)
    kr.append(column.IsDefinedBy[12].RelatingPropertyDefinition[4][3].NominalValue.wrappedValue)
    tf.append(column.IsDefinedBy[12].RelatingPropertyDefinition[4][4].NominalValue.wrappedValue)
    tw.append(column.IsDefinedBy[12].RelatingPropertyDefinition[4][5].NominalValue.wrappedValue)

# Creating total crossection matrix
column_CMatrix = [[bf], [d], [k], [kr], [tf], [tw]]


#### Printing Beam results ####
print(BeamMaterial)
print(BeamLenght)
print(BeamCrossArea)
print(beam_PMatrix)
print(beam_CMatrix)

#### Printing Column results ####
print(ColumnMaterial)
print(ColumnLenght)
print(ColumnCrossArea)
print(column_PMatrix)
print(column_CMatrix)
