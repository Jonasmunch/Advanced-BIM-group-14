##################################################
##### Opening the IFC interface and packages #####
##################################################

import ifcopenshell
import ifcopenshell.geom
from blenderbim.bim.ifc import IfcStore

##################################################
##### Retriving source model                 #####
##################################################

file = IfcStore.get_file()

##################################################
##### Extracting beams and columns           #####
##################################################

Beams = file.by_type("IfcBeam")
Columns = file.by_type("IfcColumn")

#### testing for possible errors: ####

if len(Columns) <= 0:    #logical testing if 'Columns' string is of lenght >0
    answer = input('ERROR missing columns. Do you want to continue? (yes or no):')  #Creating answer menu
    if answer.lower().startswith("yes"):    #Criteria if answer = yes
        print("Proceeding without columns")
        Columns = 0
    elif answer.lower().startswith("no"):   #Criteria if answer = no
        print("Executing process. Please update source model")
        exit()

if len(Beams) <= 0:
    answer = input('ERROR missing beams. Do you want to continue? (yes or no):')
    if answer.lower().startswith("yes"):
        print("Proceeding without beams")
        Beams = 0
    elif answer.lower().startswith("no"):
        print("Executing process. Please update source model")
        exit()


##################################################
##### Extracting beams and column properties #####
##################################################

########### Oscar Bidrag ####################

##### beams #####
for beam in Beams:
    BeamsName = beam.ObjectType   #gets the names of each beam
    HeigthBeam = int(BeamsName[17:20])
    WidthBeam = int(BeamsName[21:23])
    AreaBeam = HeigthBeam*WidthBeam 
    print(AreaBeam)
break
 
##### beams #####
for column in Columns:   #virker ikke
    ColumnsName = columns.ObjectType
    DeepthBeam = ColumnsName[17:20]
    WidthBeam = ColumnsName[21:23]
break

########### Joakim Bidrag ####################

# Creating empty property vectors 
BeamMaterial = []
BeamLenght = []
BeamCrossArea = []
x_Placement = []
y_Placement = []
z_Placement = []

# Looping through all beams
for beam in Beams:
    # Extracting Beam material, adding it to the property vector
    BeamMaterial.append(beam.IsDefinedBy[3].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    # Extracting Beam Lenght, adding it to the property vector
    BeamLenght.append(beam.IsDefinedBy[4].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue)
    # Extracting Beam crosssectional area, adding it to the property vector
    pval_volume = beam.IsDefinedBy[4].RelatingPropertyDefinition[4][1].NominalValue.wrappedValue
    pval_length = beam.IsDefinedBy[4].RelatingPropertyDefinition[4][0].NominalValue.wrappedValue
    BeamCrossArea.append(pval_volume/pval_length)

# Looping through all beams
for beam in Beams:
    # Extracting local placement matrix
    pmatrix = ifcopenshell.util.placement.get_local_placement(beam.ObjectPlacement)
    # Extracting axis placement and assigning them to placement_vector
    x_Placement.append(pmatrix[0,3])
    y_Placement.append(pmatrix[1,3])
    z_Placement.append(pmatrix[2,3])

# Creating total placement matrix
PMatrix = [[x_Placement], [y_Placement], [z_Placement]]

# Printing results
print(BeamMaterial)
print(BeamLenght)
print(BeamCrossArea)
print(PMatrix)

   

